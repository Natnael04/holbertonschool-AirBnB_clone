#!/usr/bin/python3
"""File_storage class"""
import json
import os
<<<<<<< Updated upstream

=======
import importlib
import pickle
>>>>>>> Stashed changes

class FileStorage:
    """
    The `FileStorage` class is a file-based storage system that allows for
    saving and loading objects to
    and from a JSON file.
    """
    __file_path = "file.json"
    __objects = {}

    def all(self):
        """
        The function returns all objects.
        Return: The method is returning the value of the attribute `__objects`.
        """
        return self.__objects

    def new(self, obj):
        """
        The function "new" adds an object to a dictionary with a key
        based on the object's class name
        and id.

        Param obj: The "obj" parameter is an object that you want to
        add to a dictionary called
        "__objects". The key for the dictionary entry is generated by
        concatenating the class name of
        the object with the object's id
        """
        key = obj.__class__.__name__ + "." + obj.id
        self.__objects[key] = obj

    def save(self):
        """
        The `save` function saves the objects in a dictionary to a JSON file.
        """
        with open(self.__file_path, 'w') as f:
            pickle.dump({k: v.to_dict() for k, v in self.__objects.items()}, f)

    def reload(self):
        """
        The `reload` function loads data from a JSON file and creates
        instances of the `BaseModel` class
        based on the data.
        """
        try:
            if os.path.exists(self.__file_path):
                with open(self.__file_path, 'rb') as f:
                    data = pickle.load(f)
                for k, v in data.items():
                    cls_name = k.split('.')[0]
                    if cls_name == "BaseModel":
                        from models.base_model import BaseModel
                        self.__objects[k] = BaseModel(**v)
        except FileNotFoundError:
            pass
